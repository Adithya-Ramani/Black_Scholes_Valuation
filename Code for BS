import numpy as np
import scipy.stats as si
import sympy as sy
from sympy.stats import normal, cdf
from sympy import init_printing
init_printing()

# S: Spot Price
# K: Strike price
# T: Time to maturity
# r: Interest rate
# sigma: volatility of underlying asset

def euro_vanilla_calls(S, K, T, r, sigma):
    d1 = (np.log(S/K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = (np.log(S/K) + (R - 0.5 * sigma ** 2) * T)/ (sigma * np.sqrt(T))
    
    call = (S * si.norm.cdf(d1, 0.0, 1.0) - K * np.exp(-r * T) * si.norm.cdf(d2, 0.0, 1,0))
    return call

def euro_vanilla_put(S, K, T, r, sigma):
    d1 = (np.log(S/K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = (np.log(S/K) + (R - 0.5 * sigma ** 2) * T)/ (sigma * np.sqrt(T)) 
    
    put = (K * np.exp(-r * T) * si.norm.cdf(-d2, 0.0, 1.0) - S * si.norm.cdf(-d1, 0.0, 1.0))
    return put

def euro_vanilla_put(S, K, T, r, sigma, option = 'call'):
    d1 = (np.log(S/K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = (np.log(S/K) + (R - 0.5 * sigma ** 2) * T)/ (sigma * np.sqrt(T))
    
    if option == 'call':
        result = (S * si.norm.cdf(d1, 0.0, 1.0) - K * np.exp(-r * T) * si.norm.cdf(d2, 0.0, 1,0))
    if option == 'put':
        result = (K * np.exp(-r * T) * si.norm.cdf(-d2, 0.0, 1.0) - S * si.norm.cdf(-d1, 0.0, 1.0))
